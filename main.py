import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import os
import random
import json

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    return []

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üéÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ", callback_data="join"))
    keyboard.add(InlineKeyboardButton("üìú –£—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞", callback_data="rules"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "rules")
async def rules(callback: types.CallbackQuery):
    await callback.message.answer("üìå –£—Å–ª–æ–≤–∏—è: –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É!")

@dp.callback_query_handler(lambda c: c.data == "join")
async def join(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
    if member.status in ["member", "creator", "administrator"]:
        users = load_users()
        if user_id in users:
            await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ ‚úÖ", show_alert=True)
        else:
            users.append(user_id)
            save_users(users)
            await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üéâ", show_alert=True)
    else:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message_handler(commands=["—Ä–æ–∑—ã–≥—Ä—ã—à"])
async def draw(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    users = load_users()
    if not users:
        await message.reply("‚ùó –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç.")
        return
    winner_id = random.choice(users)
    await message.answer(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <a href='tg://user?id={winner_id}'>—É—á–∞—Å—Ç–Ω–∏–∫</a>")
    save_users([])

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)